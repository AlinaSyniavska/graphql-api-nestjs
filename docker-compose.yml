version: '3.8'

services:
  web-api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        ENV_FILE: .env
      # Only will build development stage from our dockerfile
      target: development
    environment:
      DATABASE_URL: postgresql://postgres:superuser@postgres:5432/graphql-movies-db?schema=public
    volumes:
      - ./api:/app
#      - /app/node_modules
    command: npm run start:dev
    ports:
      - 5000:5000
    restart: on-failure
    depends_on:
      - postgres

  web-app:
    container_name: web-app
    build:
      context: ./web-app
      dockerfile: Dockerfile
      args:
        ENV_FILE: .env.local
    restart: unless-stopped
    stdin_open: true
    tty: true
    volumes:
      - ./web-app:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    ports:
      - 3000:3000

#  postgres:
#    image: postgres
#    restart: always
#    environment:
#      POSTGRES_DB: graphql-movies-db
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: superuser
#    ports:
#      - '5432:5432'
#    volumes:
#      - docker-nest-postgres:/var/lib/postgresql/data
#volumes:
#  docker-nest-postgres:

  postgres:
    container_name: container-postgres
    image: postgres
#    hostname: localhost
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: graphql-movies-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: superuser
      DATABASE_URL: postgresql://postgres:superuser@postgres:5432/graphql-movies-db?schema=public
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - d:/backup_folder/db-backup.sq:/docker-entrypoint-initdb.d
    restart: always

volumes:
  postgres-data: